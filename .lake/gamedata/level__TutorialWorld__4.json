{"title": "The `constructor` tactic",
 "template": null,
 "tactics":
 [{"new": false,
   "name": "apply",
   "locked": true,
   "hidden": false,
   "displayName": "apply",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "cases'",
   "locked": true,
   "hidden": false,
   "displayName": "cases'",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": true,
   "name": "constructor",
   "locked": false,
   "hidden": false,
   "displayName": "constructor",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "exact",
   "locked": false,
   "hidden": false,
   "displayName": "exact",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "exfalso",
   "locked": true,
   "hidden": false,
   "displayName": "exfalso",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "induction'",
   "locked": true,
   "hidden": false,
   "displayName": "induction'",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "intro",
   "locked": false,
   "hidden": false,
   "displayName": "intro",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "intros",
   "locked": true,
   "hidden": true,
   "displayName": "intros",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "linarith",
   "locked": true,
   "hidden": false,
   "displayName": "linarith",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "nth_rewrite",
   "locked": false,
   "hidden": true,
   "displayName": "nth_rewrite",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "obtain",
   "locked": true,
   "hidden": false,
   "displayName": "obtain",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "repeat",
   "locked": false,
   "hidden": true,
   "displayName": "repeat",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "rfl",
   "locked": false,
   "hidden": false,
   "displayName": "rfl",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "rw",
   "locked": false,
   "hidden": false,
   "displayName": "rw",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "simp",
   "locked": true,
   "hidden": false,
   "displayName": "simp",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "symm",
   "locked": true,
   "hidden": false,
   "displayName": "symm",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "unfold",
   "locked": true,
   "hidden": false,
   "displayName": "unfold",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "use",
   "locked": true,
   "hidden": false,
   "displayName": "use",
   "disabled": false,
   "category": "",
   "altTitle": ""}],
 "statementName": "[anonymous]",
 "module": "Game.Levels.TutorialWorld.Level04",
 "lemmas":
 [{"new": false,
   "name": "LinearAlgebraGame.neg_one_smul_v",
   "locked": true,
   "hidden": false,
   "displayName": "neg_one_smul_v",
   "disabled": false,
   "category": "Vector Spaces",
   "altTitle":
   " {K V} (fk : Field K) (acg : AddCommGroup V) (vs : LinearAlgebraGame.VectorSpace K V) (v : V) : -1 • v = -v"},
  {"new": false,
   "name": "LinearAlgebraGame.smul_zero_v",
   "locked": true,
   "hidden": false,
   "displayName": "smul_zero_v",
   "disabled": false,
   "category": "Vector Spaces",
   "altTitle":
   " {K V} (fk : Field K) (acg : AddCommGroup V) (vs : LinearAlgebraGame.VectorSpace K V) (a : K) : a • 0 = 0"},
  {"new": false,
   "name": "LinearAlgebraGame.subspace_contains_zero",
   "locked": true,
   "hidden": false,
   "displayName": "subspace_contains_zero",
   "disabled": false,
   "category": "Vector Spaces",
   "altTitle":
   " {K V} (fk : Field K) (acg : AddCommGroup V) (vs : LinearAlgebraGame.VectorSpace K V) {W}\n  (hW : LinearAlgebraGame.isSubspace W) : 0 ∈ W"},
  {"new": false,
   "name": "LinearAlgebraGame.subspace_neg",
   "locked": true,
   "hidden": false,
   "displayName": "subspace_neg",
   "disabled": false,
   "category": "Vector Spaces",
   "altTitle":
   " {K V} (fk : Field K) (acg : AddCommGroup V) (vs : LinearAlgebraGame.VectorSpace K V) {W}\n  (hW : LinearAlgebraGame.isSubspace W) (x : V) (a✝ : x ∈ W) : -x ∈ W"},
  {"new": false,
   "name": "LinearAlgebraGame.zero_smul_v",
   "locked": true,
   "hidden": false,
   "displayName": "zero_smul_v",
   "disabled": false,
   "category": "Vector Spaces",
   "altTitle":
   " {K V} (fk : Field K) (acg : AddCommGroup V) (vs : LinearAlgebraGame.VectorSpace K V) (w : V) : 0 • w = 0"},
  {"new": false,
   "name": "MulAction.mul_smul",
   "locked": true,
   "hidden": false,
   "displayName": "mul_smul",
   "disabled": false,
   "category": "Vector Spaces",
   "altTitle":
   " {α} {β} [Monoid α] [MulAction α β] (x y : α) (b : β) : (x * y) • b = x • y • b"},
  {"new": false,
   "name": "Nat.add_succ",
   "locked": true,
   "hidden": false,
   "displayName": "add_succ",
   "disabled": false,
   "category": "ℕ",
   "altTitle": " (n m : ℕ) : n + Nat.succ m = Nat.succ (n + m)"},
  {"new": false,
   "name": "add_neg_self",
   "locked": true,
   "hidden": false,
   "displayName": "add_neg_self",
   "disabled": false,
   "category": "Groups",
   "altTitle": " {G} [AddGroup G] (a : G) : a + -a = 0"},
  {"new": false,
   "name": "add_right_cancel",
   "locked": true,
   "hidden": false,
   "displayName": "add_right_cancel",
   "disabled": false,
   "category": "Groups",
   "altTitle":
   " {G} [Add G] [IsRightCancelAdd G] {a b c} (a✝ : a + b = c + b) : a = c"},
  {"new": false,
   "name": "add_smul",
   "locked": true,
   "hidden": false,
   "displayName": "add_smul",
   "disabled": false,
   "category": "Vector Spaces",
   "altTitle":
   " {R} {M} [Semiring R] [AddCommMonoid M] [Module R M] (r s : R) (x : M) : (r + s) • x = r • x + s • x"},
  {"new": false,
   "name": "add_zero",
   "locked": true,
   "hidden": false,
   "displayName": "add_zero",
   "disabled": false,
   "category": "Groups",
   "altTitle": " {M} [AddZeroClass M] (a : M) : a + 0 = a"},
  {"new": false,
   "name": "le_iff_exists_add",
   "locked": true,
   "hidden": false,
   "displayName": "le_iff_exists_add",
   "disabled": false,
   "category": "ℕ",
   "altTitle":
   " {α} [CanonicallyOrderedAddCommMonoid α] {a b} : a ≤ b ↔ ∃ c, b = a + c"},
  {"new": false,
   "name": "neg_add_self",
   "locked": true,
   "hidden": false,
   "displayName": "neg_add_self",
   "disabled": false,
   "category": "Groups",
   "altTitle": " {G} [AddGroup G] (a : G) : -a + a = 0"},
  {"new": false,
   "name": "one_smul",
   "locked": true,
   "hidden": false,
   "displayName": "one_smul",
   "disabled": false,
   "category": "Vector Spaces",
   "altTitle":
   " (M : Type u_1) {α} [Monoid M] [MulAction M α] (b : α) : 1 • b = b"},
  {"new": false,
   "name": "smul_add",
   "locked": true,
   "hidden": false,
   "displayName": "smul_add",
   "disabled": false,
   "category": "Vector Spaces",
   "altTitle":
   " {M} {A} [AddZeroClass A] [DistribSMul M A] (a : M) (b₁ b₂ : A) : a • (b₁ + b₂) = a • b₁ + a • b₂"},
  {"new": false,
   "name": "symm",
   "locked": true,
   "hidden": false,
   "displayName": "symm",
   "disabled": false,
   "category": "Lean",
   "altTitle": " {α} {r} [IsSymm α r] {a b} (a✝ : r a b) : r b a"},
  {"new": false,
   "name": "zero_add",
   "locked": true,
   "hidden": false,
   "displayName": "zero_add",
   "disabled": false,
   "category": "Groups",
   "altTitle": " {M} [AddZeroClass M] (a : M) : 0 + a = a"}],
 "lemmaTab": null,
 "introduction":
 "In this level we will learn `constructor` in the context of logical 'and' (∧).\nOur goal is to prove `P ∧ Q`, \"P and Q\", given hypotheses `p: P` and `q: Q`.\n\n### Constructor:\n\nThe `constructor` tactic works by splitting up the goal. If you have a goal `P ∧ Q`, the tactic makes\nprogress by turning this one goal into two goals: to prove `P` and to prove `Q`. Constructor also\nworks similarly for `↔` \"if and only if\" goals.",
 "index": 4,
 "image": "",
 "displayName": null,
 "descrText": null,
 "descrFormat": "example (P Q : Prop) (p : P) (q : Q) : P ∧ Q  := by",
 "definitions":
 [{"new": false,
   "name": "VectorSpace_w1",
   "locked": true,
   "hidden": false,
   "displayName": "Vector Space",
   "disabled": false,
   "category": "",
   "altTitle": ""},
  {"new": false,
   "name": "isSubspace",
   "locked": true,
   "hidden": false,
   "displayName": "isSubspace",
   "disabled": false,
   "category": "",
   "altTitle": ""}],
 "conclusion":
 "You can now prove goals by splitting them into multiple steps with the `constructor` tactic!"}